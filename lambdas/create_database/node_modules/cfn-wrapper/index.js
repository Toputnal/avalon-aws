module.exports = (worker) => {
  this.worker = worker;

  return (event, context, callback) => {
    var response = require('cfn-response');

    worker.reply = reply = function(err, physicalId, data) {
      try {
        if (data == null) data = {};
        data.LogicalResourceId = event.LogicalResourceId;
        data.RequestId = event.RequestId;
        data.StackId = event.StackId;

        if (err) {
          console.log("Sending FAILED response: " + err)
          response.send(event, context, response.FAILED, { "Error": "Lambda Error: " + err });
        } else {
          console.log("Sending SUCCESS response: " + physicalId)
          response.send(event, context, response.SUCCESS, data, physicalId + "$OK");
        }
      } catch(e) {
        response.send(event, context, response.FAILED, { "Error": "Wrapper Error: " + e });
      }
    }

    console.log('REQUEST RECEIVED:', JSON.stringify(event));
    var physicalResourceId = event.PhysicalResourceId;
    var re = /^(.+)\$OK$/;
    if ((physicalResourceId != null) && re.test(physicalResourceId)) {
      physicalResourceId = physicalResourceId.match(re)[1];
    }
    console.log('PHYSICAL RESOURCE ID:', physicalResourceId);
    try {
      params = event.ResourceProperties;
      delete params.ServiceToken;
      if (typeof worker.init == 'function') worker.init(context);
      switch (event.RequestType) {
        case "Create":
          console.log('Calling CREATE handler');
          worker.create(params);
          break;
        case "Update":
          if (physicalResourceId == null) {
            reply(null, physicalResourceId, { Id: physicalResourceId });
            return;
          }
          console.log('Calling UPDATE handler');
          worker.update(params, physicalResourceId);
          break;
        case "Delete":
          if (physicalResourceId == null) {
            reply(null, physicalResourceId, { Id: physicalResourceId });
            return;
          }
          console.log('Calling DELETE handler');
          worker.delete(params, physicalResourceId);
          break;
        default:
          worker.reply("Unknown request type: " + event.RequestType);
      }
    } catch(err) {
      worker.reply(err);
    }
  };
}
